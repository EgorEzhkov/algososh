import { selectionSort, bubbleSort } from "./algorithms";

describe("Тестирование алгоритма сортировки выбором по убыванию", () => {
  it("Алгоритм корректно сортирует пустой массив", () => {
    expect(selectionSort([], false)).toEqual([]);
  });
  it("Алгоритм корректно сортирует массив из одного элемента", () => {
    expect(selectionSort([1], false)).toEqual([1]);
  });
  it("Алгоритм корректно сортирует массив из нескольких элементов", () => {
    expect(selectionSort([41, 15, 21, 122, 5], false)).toEqual([122, 41, 21, 15, 5]);
  });
});

describe("Тестирование алгоритма сортировки выбором по возрастанию", () => {
  it("Алгоритм корректно сортирует пустой массив", () => {
    expect(selectionSort([], true)).toEqual([]);
  });
  it("Алгоритм корректно сортирует массив из одного элемента", () => {
    expect(selectionSort([1], true)).toEqual([1]);
  });
  it("Алгоритм корректно сортирует массив из нескольких элементов", () => {
    expect(selectionSort([41, 15, 21, 122, 5], true)).toEqual([5, 15, 21, 41, 122]);
  });
});

describe("Тестирование алгоритма сортировки пузырьком по возрастанию", () => {
  it("Алгоритм корректно сортирует пустой массив", () => {
    expect(bubbleSort([], false)).toEqual([]);
  });
  it("Алгоритм корректно сортирует массив из одного элемента", () => {
    expect(bubbleSort([1], false)).toEqual([1]);
  });
  it("Алгоритм корректно сортирует массив из нескольких элементов", () => {
    expect(bubbleSort([41, 15, 21, 122, 5], false)).toEqual([5, 15, 21, 41, 122]);
  });
});

describe("Тестирование алгоритма сортировки пузырьком по убыванию", () => {
  it("Алгоритм корректно сортирует пустой массив", () => {
    expect(bubbleSort([], true)).toEqual([]);
  });
  it("Алгоритм корректно сортирует массив из одного элемента", () => {
    expect(bubbleSort([1], true)).toEqual([1]);
  });
  it("Алгоритм корректно сортирует массив из нескольких элементов", () => {
    expect(bubbleSort([41, 15, 21, 122, 5], true)).toEqual([122, 41, 21, 15, 5]);
  });
});
